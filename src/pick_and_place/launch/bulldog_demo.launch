<launch>
    <!-- Load rosconsole configuration -->
    <env name="ROSCONSOLE_CONFIG_FILE" 
        value="$(find pick_and_place)/config/rosconsole.config" />
    
    <!-- Debug -->
    <arg name="debug" default="false" />
    <arg unless="$(arg debug)" name="launch_prefix" value="" />
    <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

    <!-- Verbose mode -->
    <arg name="verbose" default="false" />
    <arg unless="$(arg verbose)" name="command_args" value="" />
    <arg     if="$(arg verbose)" name="command_args" value="--verbose" />

    <!-- By default, hide joint_state_publisher GUI -->
    <arg name="use_gui" default="false" />

    <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
    <include file="$(find pick_and_place)/launch/moveit/planning_context.launch">
        <arg name="load_robot_description" value="true" />
    </include>

    <!-- If needed, broadcast static tf for robot root -->
    <node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 odom base_link 100" />
    <!-- <node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_1" args="0 0 0 0 0 0 /odom /virtual_joint 100" /> -->


    <!-- Publish fake joint state -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="$(arg use_gui)" />
        <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    </node>

    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" 
        respawn="false" output="screen" />

    <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find pick_and_place)/launch/moveit/move_group.launch">
        <arg name="allow_trajectory_execution" value="true"/>
        <arg name="fake_execution" value="true"/>
        <arg name="info" value="true"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>

    <!-- Run Rviz and load the default config to see the state of the move_group node -->
    <include file="$(find pick_and_place)/launch/moveit/moveit_rviz.launch">
        <arg name="config" value="true"/>
        <arg name="debug" value="$(arg debug)"/>
    </include>

    <!-- Load the pick and place demo -->
    <node name="bulldog_pick_and_place_demo" pkg="pick_and_place" type="bulldog_pick_and_place_demo"
        launch-prefix="$(arg launch_prefix)" output="screen" 
        args="$(arg command_args)">
        <param name="end_effector_group_name" value="left_gripper" />
        <param name="arm_group_name" value="left_arm" />
        <param name="planning_plugin" value="ompl_interface/OMPLPlanner" />
        <rosparam command="load" file="$(find pick_and_place)/config/moveit_grasps_config.yaml" />
        <rosparam command="load" file="$(find pick_and_place)/config/bulldog_grasp_data.yaml" />
    </node>

    <!-- Planning Functionality -->
    <!-- <arg name="planner" default="ompl" />
    <include ns="bulldog_pick_and_place_demo" file="$(find pick_and_place_demo)/launch/moveit/planning_pipeline.launch.xml">
        <arg name="pipeline" value="$(arg planner)" />
    </include> -->
</launch>
