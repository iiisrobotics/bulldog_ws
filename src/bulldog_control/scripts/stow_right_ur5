#!/usr/bin/env python
import rospy
import actionlib
from control_msgs.msg import *
from trajectory_msgs.msg import *
from controller_manager_msgs.srv import *
from controller_manager_msgs.msg import *

JOINT_NAMES = ['right_arm_shoulder_pan_joint', 'right_arm_shoulder_lift_joint', 'right_arm_elbow_joint',
               'right_arm_wrist_1_joint', 'right_arm_wrist_2_joint', 'right_arm_wrist_3_joint']

# use time interval between trajectory points to limit movement speed
TRAJECTOR_POINTS_TIME_INTERVAL = 5.0

target_states = {
    'right_arm_extension_1': [1.5708, -1.5708, 0.0, -1.5708, 0.0, 0.0],
    'right_arm_extensiton_2': [-1.5708, -1.5708, 0.0, -1.5708, 0.0, 0.0],
    'right_arm_default': [0.0, 0.0, -2.8300, 0.0, 1.5708, -0.7854],
    'right_arm_up': [1.5708, -2.3562, 0.0, -3.1415, 0.0, 2.3562]
}

client = None

def move(target_state):
    rospy.loginfo("[StowRightUR5] Stowing right arm...")

    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = JOINT_NAMES
    g.trajectory.points = [
        JointTrajectoryPoint(
            positions=target_states[target_state], 
            velocities=[0] * 6, 
            time_from_start=rospy.Duration(TRAJECTOR_POINTS_TIME_INTERVAL)
        )
    ]

    client.send_goal(g)
    done = client.wait_for_result()

    if not done:
        rospy.logerr("[StowRightUR5] Stow right UR5 failed!")
        raise SystemExit()

    rospy.loginfo("[StowRightUR5] Right arm stowed")

def move_disordered():
    order = [4, 2, 3, 1, 5, 0]
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = [JOINT_NAMES[i] for i in order]
    q1 = [Q1[i] for i in order]
    q2 = [Q2[i] for i in order]
    q3 = [Q3[i] for i in order]
    g.trajectory.points = [
        JointTrajectoryPoint(positions=q1, velocities=[0]*6, time_from_start=rospy.Duration(2.0)),
        JointTrajectoryPoint(positions=q2, velocities=[0]*6, time_from_start=rospy.Duration(3.0)),
        JointTrajectoryPoint(positions=q3, velocities=[0]*6, time_from_start=rospy.Duration(4.0))]
    client.send_goal(g)
    client.wait_for_result()
    
def move_repeated():
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = JOINT_NAMES
    
    d = 2.0
    g.trajectory.points = []
    for i in range(10):
        g.trajectory.points.append(
            JointTrajectoryPoint(positions=Q1, velocities=[0]*6, time_from_start=rospy.Duration(d)))
        d += 1
        g.trajectory.points.append(
            JointTrajectoryPoint(positions=Q2, velocities=[0]*6, time_from_start=rospy.Duration(d)))
        d += 1
        g.trajectory.points.append(
            JointTrajectoryPoint(positions=Q3, velocities=[0]*6, time_from_start=rospy.Duration(d)))
        d += 2
    client.send_goal_and_wait(g)
    # client.send_goal(g)
    try:
        client.wait_for_result()
    except KeyboardInterrupt:
        client.cancel_goal()
        raise

def move_interrupt():
    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = JOINT_NAMES
    g.trajectory.points = [
        JointTrajectoryPoint(positions=Q1, velocities=[0]*6, time_from_start=rospy.Duration(2.0)),
        JointTrajectoryPoint(positions=Q2, velocities=[0]*6, time_from_start=rospy.Duration(3.0)),
        JointTrajectoryPoint(positions=Q3, velocities=[0]*6, time_from_start=rospy.Duration(4.0))]
    
    client.send_goal(g)
    rospy.sleep(2.0)
    rospy.loginfo("[StowRightUR5] Interrupting...")
    client.send_goal(g)
    try:
        client.wait_for_result()
    except KeyboardInterrupt:
        client.cancel_goal()
        raise

def main():
    global client
    try:
        rospy.init_node("stow_right", anonymous=True)
        target_state = rospy.get_param('~target_state', default='right_arm_default')

        client = actionlib.SimpleActionClient(
            'right_arm_controller/follow_joint_trajectory', 
            FollowJointTrajectoryAction
        )
        rospy.loginfo("[StowRightUR5] Waiting for right ur5 arm controller server...")
        client.wait_for_server()
        rospy.loginfo("[StowRightUR5] Right ur5 arm controller server is available.")
        move(target_state)
    except KeyboardInterrupt:
        rospy.signal_shutdown("KeyboardInterrupt")
        raise

if __name__ == '__main__': 
    main()
